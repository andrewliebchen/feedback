{
  "version": 3,
  "sources": [
    "../../../../../../.meteor/packages/cosmos_browserify/.0.5.0.9ybijz++os+web.browser+web.cordova/plugin.CosmosBrowserify.os/npm/CosmosBrowserify/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "_stream_0.js",
    "node_modules/react-dropzone/index.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "Dropzone = require('react-dropzone');\n",
    "var React = (typeof window !== \"undefined\" ? window['React']['require'] : typeof global !== \"undefined\" ? global['React']['require'] : null)(\"react\");\n\nvar Dropzone = React.createClass({\n  getDefaultProps: function() {\n    return {\n      supportClick: true,\n      multiple: true\n    };\n  },\n\n  getInitialState: function() {\n    return {\n      isDragActive: false\n    };\n  },\n\n  propTypes: {\n    onDrop: React.PropTypes.func.isRequired,\n    onDragOver: React.PropTypes.func,\n    onDragLeave: React.PropTypes.func,\n    size: React.PropTypes.number,\n    width: React.PropTypes.number,\n    height: React.PropTypes.number,\n    style: React.PropTypes.object,\n    supportClick: React.PropTypes.bool,\n    accept: React.PropTypes.string,\n    multiple: React.PropTypes.bool\n  },\n\n  onDragLeave: function(e) {\n    this.setState({\n      isDragActive: false\n    });\n\n    if (this.props.onDragLeave) {\n      this.props.onDragLeave(e);\n    }\n  },\n\n  onDragOver: function(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.dataTransfer.dropEffect = 'copy';\n\n    // set active drag state only when file is dragged into\n    // (in mozilla when file is dragged effect is \"uninitialized\")\n    var effectAllowed = e.dataTransfer.effectAllowed;\n    if (effectAllowed === 'all' || effectAllowed === 'uninitialized') {\n      this.setState({\n        isDragActive: true\n      });\n    }\n\n    if (this.props.onDragOver) {\n      this.props.onDragOver(e);\n    }\n  },\n\n  onDrop: function(e) {\n    e.preventDefault();\n\n    this.setState({\n      isDragActive: false\n    });\n\n    var files;\n    if (e.dataTransfer) {\n      files = e.dataTransfer.files;\n    } else if (e.target) {\n      files = e.target.files;\n    }\n\n    var maxFiles = (this.props.multiple) ? files.length : 1;\n    for (var i = 0; i < maxFiles; i++) {\n      files[i].preview = URL.createObjectURL(files[i]);\n    }\n\n    if (this.props.onDrop) {\n      files = Array.prototype.slice.call(files, 0, maxFiles);\n      this.props.onDrop(files, e);\n    }\n  },\n\n  onClick: function () {\n    if (this.props.supportClick === true) {\n      this.open();\n    }\n  },\n\n  open: function() {\n    var fileInput = React.findDOMNode(this.refs.fileInput);\n    fileInput.value = null;\n    fileInput.click();\n  },\n\n  render: function() {\n    var className = this.props.className || 'dropzone';\n    if (this.state.isDragActive) {\n      className += ' active';\n    }\n\n    var style = {};\n    if (this.props.style) { // user-defined inline styles take priority\n      style = this.props.style;\n    } else if (!this.props.className) { // if no class or inline styles defined, use defaults\n      style = {\n        width: this.props.width || this.props.size || 100,\n        height: this.props.height || this.props.size || 100,\n        borderStyle: this.state.isDragActive ? 'solid' : 'dashed'\n      };\n    }\n\n    return (\n      React.createElement('div',\n        {\n          className: className,\n          style: style,\n          onClick: this.onClick,\n          onDragLeave: this.onDragLeave,\n          onDragOver: this.onDragOver,\n          onDrop: this.onDrop\n        },\n        React.createElement('input',\n          {\n            style: { display: 'none' },\n            type: 'file',\n            multiple: this.props.multiple,\n            ref: 'fileInput',\n            onChange: this.onDrop,\n            accept: this.props.accept\n          }\n        ),\n        this.props.children\n      )\n    );\n  }\n\n});\n\nmodule.exports = Dropzone;\n"
  ]
}